/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AnalizadorLSJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[5,8,14],$V3=[1,12],$V4=[10,11],$V5=[1,29],$V6=[1,22],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[13,17,25,34,35,36,37,38],$Vd=[10,30],$Ve=[2,23],$Vf=[1,40],$Vg=[22,30],$Vh=[2,77],$Vi=[1,52],$Vj=[1,55],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,53],$Vp=[1,54],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[2,69],$Vu=[1,64],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[10,22,30,43,44,45,46,47,48,49,50,51,52,53,54,55,56,104],$VL=[10,22,30,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,104],$VM=[2,59],$VN=[1,87],$VO=[1,130],$VP=[1,131],$VQ=[2,80],$VR=[1,133],$VS=[1,139],$VT=[1,140],$VU=[1,141],$VV=[1,142],$VW=[1,138],$VX=[1,135],$VY=[1,136],$VZ=[1,137],$V_=[10,22,30,43,44,104],$V$=[10,22,30,43,44,45,46,47,48,49,50,104],$V01=[10,22,30,43,44,45,46,47,48,49,50,51,52,104],$V11=[10,22,30,43,44,45,46,47,48,49,50,51,52,53,54,104],$V21=[17,103,105],$V31=[2,13,17,34,35,36,37,38,83,88,89,90,93,98,103,105,106,107,108],$V41=[1,158],$V51=[2,13,17,34,35,36,37,38,83,88,89,90,93,97,98,103,105,106,107,108],$V61=[1,223],$V71=[1,222];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"IMPORT":6,"CLASES":7,"R_Import":8,"LISTADO_IMPORT":9,"S_PuntoComa":10,"S_Punto":11,"DEFINE_IMPORT":12,"Identificador":13,"R_Class":14,"S_LlaveAbre":15,"LISTA_CLASES":16,"S_LlaveCierra":17,"CONTENIDO_CLASE":18,"TIPO_DATO":19,"S_ParentesisAbre":20,"PARAMETROS":21,"S_ParentesisCierra":22,"INSTRUCCIONES":23,"VARIABLE":24,"R_Void":25,"METODO_VOID":26,"LLAMAR_METODOF_CLASE":27,"R_Main":28,"LISTADO_ID_VARIABLE":29,"S_Coma":30,"CONTENIDO_VARIABLE":31,"S_Igual":32,"EXPRESION_G":33,"T_Int":34,"T_String":35,"T_Boolean":36,"T_Char":37,"T_Double":38,"MODIFICADORES_ACCESO":39,"R_Protected":40,"R_Public":41,"R_Private":42,"LOG_Concatenar":43,"LOG_OR":44,"REL_IgualIgual":45,"REL_MayorIgualQue":46,"REL_MayorQue":47,"REL_MenorIgualQue":48,"REL_MenorQue":49,"REL_Distinto":50,"OP_Mas":51,"OP_Menos":52,"OP_Multiplicacion":53,"OP_Division":54,"OP_Potencia":55,"OP_Modulo":56,"CONTENIDO_EXPRESION":57,"OP_Decremento":58,"OP_Incremento":59,"LOG_Not":60,"Entero":61,"Decimal":62,"OPCIONAL":63,"R_True":64,"R_False":65,"Cadena":66,"Char":67,"CHAR_Especial":68,"FUNC":69,"DEFINIR_PARAMETRO":70,"LISTA_PARAMETROS":71,"METODOS_LL":72,"PARAMETROS_FUNC":73,"LISTA_INS":74,"LISTA_INSTRUCCIONES":75,"IMPRIMIR":76,"SENT_IF":77,"LOOP_WHILE":78,"LOOP_DO_WHILE":79,"LOOP_FOR":80,"SENT_SWITCH":81,"S_TRANSFERENCIA":82,"R_System":83,"R_Out":84,"TIPO_IMPRESION":85,"R_Print":86,"R_Println":87,"R_Break":88,"R_Continue":89,"R_Return":90,"IF_FIJO":91,"DEF_IF":92,"R_If":93,"LISTADO_ELSI":94,"ELSE_FIJO":95,"ELSE_IF":96,"R_Else":97,"R_Switch":98,"LISTA_CASE":99,"LS_CASE":100,"RED_SWITCH":101,"DEF_CASE":102,"R_Case":103,"S_DosPuntos":104,"def":105,"R_While":106,"R_Do":107,"R_For":108,"CONT_FOR":109,"FIN_FOR":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"R_Import",10:"S_PuntoComa",11:"S_Punto",13:"Identificador",14:"R_Class",15:"S_LlaveAbre",17:"S_LlaveCierra",20:"S_ParentesisAbre",22:"S_ParentesisCierra",25:"R_Void",28:"R_Main",30:"S_Coma",32:"S_Igual",34:"T_Int",35:"T_String",36:"T_Boolean",37:"T_Char",38:"T_Double",40:"R_Protected",41:"R_Public",42:"R_Private",43:"LOG_Concatenar",44:"LOG_OR",45:"REL_IgualIgual",46:"REL_MayorIgualQue",47:"REL_MayorQue",48:"REL_MenorIgualQue",49:"REL_MenorQue",50:"REL_Distinto",51:"OP_Mas",52:"OP_Menos",53:"OP_Multiplicacion",54:"OP_Division",55:"OP_Potencia",56:"OP_Modulo",58:"OP_Decremento",59:"OP_Incremento",60:"LOG_Not",61:"Entero",62:"Decimal",64:"R_True",65:"R_False",66:"Cadena",67:"Char",68:"CHAR_Especial",83:"R_System",84:"R_Out",86:"R_Print",87:"R_Println",88:"R_Break",89:"R_Continue",90:"R_Return",93:"R_If",97:"R_Else",98:"R_Switch",103:"R_Case",104:"S_DosPuntos",105:"def",106:"R_While",107:"R_Do",108:"R_For"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[4,1],[6,3],[9,3],[9,1],[12,1],[7,5],[16,2],[16,1],[18,8],[18,1],[18,2],[18,1],[26,6],[26,7],[24,3],[29,3],[29,1],[31,3],[31,1],[19,1],[19,1],[19,1],[19,1],[19,1],[39,1],[39,1],[39,1],[39,0],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,2],[33,2],[33,1],[57,1],[57,1],[57,3],[57,4],[57,1],[57,1],[57,3],[57,1],[57,1],[57,1],[57,1],[63,1],[63,3],[69,1],[69,0],[21,2],[21,1],[21,0],[71,3],[71,2],[70,2],[72,4],[72,5],[73,3],[73,1],[73,0],[27,5],[23,1],[23,0],[74,2],[74,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,2],[76,9],[85,1],[85,1],[82,2],[82,2],[82,3],[77,2],[91,7],[92,2],[92,1],[92,1],[92,0],[94,2],[94,1],[95,4],[96,8],[81,7],[99,2],[99,1],[99,1],[99,0],[100,2],[100,1],[102,4],[101,3],[78,7],[79,9],[80,11],[109,4],[109,3],[110,3],[110,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(JSON.stringify($$[$0-1], null, 2)); return $$[$0-1];
break;
case 2: case 4: case 11: case 81:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 5: case 8: case 12: case 63: case 68: case 76:
this.$ = [$$[$0]];
break;
case 6:
this.$ = API.n_Import($$[$0-1]);
break;
case 7:

        var obj_if = []; 
        if(Array.isArray($$[$0]) && !Array.isArray($$[$0-2])){
            $$[$0].unshift($$[$0-2]); 
            this.$ = $$[$0];
        }else if(Array.isArray($$[$0-2]) && !Array.isArray($$[$0])){
            $$[$0-2].push($$[$0]); 
            this.$ = $$[$0-2];
        } else{
            obj_if.push($$[$0]);
            obj_if.unshift($$[$0-2]);
            this.$ = obj_if;
        } 
    
break;
case 9:
this.$ = API.n_Ident($$[$0]);
break;
case 10:
this.$ = API.n_Clase($$[$0-3],$$[$0-1]);
break;
case 13:
this.$ =API.n_Metodo_Funcion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 14: case 16:
this.$=1;
break;
case 15:
this.$ =$$[$0];
break;
case 17:
this.$ = API.n_Metodo_Principal($$[$0-1]);
break;
case 18:
this.$ = API.n_Metodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 19:
this.$ = API.n_Declaracion($$[$0-2] , $$[$0-1]);
break;
case 20:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 21:
this.$ = [$$[$0]]
break;
case 22:
this.$ = API.n_Variable($$[$0-2],$$[$0])
break;
case 23:
this.$ = API.n_Variable($$[$0],'undefined')
break;
case 24:
this.$ = TIPO.INT; 
break;
case 25:
this.$ = TIPO.STRING; 
break;
case 26:
this.$ = TIPO.BOOLEAN; 
break;
case 27:
this.$ = TIPO.CHAR; 
break;
case 28:
this.$ = TIPO.DOUBLE; 
break;
case 29: case 30: case 31: case 65: case 79:
this.$ = $$[$0];
break;
case 32:
 this.$ = 'undefined'; 
break;
case 33:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 34:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 35:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 36:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL_QUE); 
break;
case 37:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE); 
break;
case 38:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL_QUE); 
break;
case 39:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE); 
break;
case 40:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 41:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 42:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 43:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 44:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 45:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 46:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 47:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.MODULO); 
break;
case 48:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 49:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NEGATIVO); 
break;
case 50:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NOT); 
break;
case 51:
 this.$ = $$[$0]; 
break;
case 52:
this.$ = API.n_Dato($$[$0],TIPO.INT); 
break;
case 53:
this.$ = API.n_Dato($$[$0],TIPO.DOUBLE); 
break;
case 54:
this.$ = API.n_Funcion($$[$0-2],'undefined');
break;
case 55:
this.$ = API.n_Funcion($$[$0-3],API.n_Parametro($$[$0-1]));
break;
case 56: case 57:
this.$ = API.n_Dato($$[$0],TIPO.BOOLEAN); 
break;
case 58:
this.$ = $$[$0-1];
break;
case 59:
this.$ = API.n_Dato($$[$0],TIPO.IDENTIFICADOR); 
break;
case 60:
this.$ = API.n_Dato($$[$0],TIPO.STRING); 
break;
case 61: case 62:
this.$ = API.n_Dato($$[$0],TIPO.CHAR); 
break;
case 64:
$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 66:
this.$='undefined';
break;
case 67:

        var obj_if = []; 
        if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        }else if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
        } 
    
break;
case 69: case 77: case 80:
this.$='';
break;
case 70:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 71:
this.$ =[$$[$0]];
break;
case 72:
this.$ = API.n_ParametroM($$[$0-1],$$[$0]);
break;
case 73:
this.$ = API.n_Asignacion($$[$0-3],$$[$0-1]);
break;
case 74:
this.$ = API.n_Funcion($$[$0-4],API.n_Parametro($$[$0-2]));
break;
case 75:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 78:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 82:
if(Array.isArray($$[$0])){this.$ = $$[$0]; }else{this.$ = [$$[$0]];}
break;
case 92:
console.error("Error Sintactico: " + yytext +" Fila: " + yylineno);
break;
case 93:
this.$ = API.n_Impresion($$[$0-4],$$[$0-2]);
break;
case 96:
 this.$ = API.n_Break(); 
break;
case 97:
 this.$ = API.n_Continue(); 
break;
case 98:
 this.$ = API.n_Return($$[$0-1]); 
break;
case 99:
 
        var obj_if = []; 
        if($$[$0] !=null){
            if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
                $$[$0-1].push($$[$0]); 
                this.$ = $$[$0-1];
            }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
                $$[$0].unshift($$[$0-1]); 
                this.$ = $$[$0];
            } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
            }
        }else{
            this.$ = $$[$0-1];
        }
    
break;
case 100:
this.$ = API.n_If($$[$0-4],$$[$0-1]);
break;
case 101: case 110:
 
        var obj_if = []; 
        if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        } else{
            obj_if.push($$[$0]);
            obj_if.unshift($$[$0-1]);
            this.$ = obj_if;
        }
    
break;
case 102: case 111:
  
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        }
    
break;
case 103: case 112:
 
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        } 
    
break;
case 105: case 114:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 106: case 115:
 this.$ = [$$[$0]];  
break;
case 107:
 this.$ = API.n_Else($$[$0-1]);  
break;
case 108:
 this.$ = API.n_ElseIf($$[$0-4],$$[$0-1]); 
break;
case 109:
this.$ = API.n_Switch($$[$0-4],$$[$0-1]); 
break;
case 116:
this.$ = API.n_Case($$[$0-2],$$[$0]);
break;
case 117:
this.$ = API.n_Default($$[$0]);
break;
case 118:
this.$ = API.n_While($$[$0-4],$$[$0-1]);
break;
case 119:
 this.$ = API.n_DoWhile($$[$0-6],$$[$0-2]); 
break;
case 120:
 this.$ = API.n_For( $$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]); 
break;
case 121:
this.$ = API.n_Declaracion($$[$0-3] , API.n_Variable($$[$0-2],$$[$0]));
break;
case 122: case 123:
this.$ = API.n_Asignacion($$[$0-2],$$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,14:$V1},{1:[3]},{5:[1,7],6:8,7:9,8:$V0,14:$V1},o($V2,[2,3]),o($V2,[2,5]),{9:10,12:11,13:$V3},{13:[1,13]},{1:[2,1]},o($V2,[2,2]),o($V2,[2,4]),{10:[1,14],11:[1,15]},o($V4,[2,8]),o($V4,[2,9]),{15:[1,16]},o($V2,[2,6]),{12:17,13:$V3},{13:$V5,16:18,18:19,19:20,24:21,25:$V6,27:23,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},o($V4,[2,7]),{13:$V5,17:[1,30],18:31,19:20,24:21,25:$V6,27:23,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},o($Vc,[2,12]),{13:[1,32],29:33,31:34},o($Vc,[2,14]),{13:[1,37],26:35,28:[1,36]},o($Vc,[2,16]),{13:[2,24]},{13:[2,25]},{13:[2,26]},{13:[2,27]},{13:[2,28]},{20:[1,38]},o($V2,[2,10]),o($Vc,[2,11]),o($Vd,$Ve,{20:[1,39],32:$Vf}),{10:[1,41],30:[1,42]},o($Vd,[2,21]),o($Vc,[2,15]),{20:[1,43]},{20:[1,44]},o($Vg,$Vh,{73:45,33:46,57:47,13:$Vi,20:$Vj,52:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs}),{19:61,21:59,22:$Vt,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,70:60},{13:$Vi,20:$Vj,33:62,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o([2,13,17,25,34,35,36,37,38,83,88,89,90,93,98,103,105,106,107,108],[2,19]),{13:$Vu,31:63},{22:[1,65]},{19:61,21:66,22:$Vt,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,70:60},{22:[1,67],30:$Vv},o($Vg,[2,76],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($VK,[2,51],{58:[1,83],59:[1,84]}),{13:$Vi,20:$Vj,57:85,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,57:86,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($VL,[2,52]),o($VL,[2,53]),o($VL,$VM,{20:$VN}),o($VL,[2,56]),o($VL,[2,57]),{13:$Vi,20:$Vj,33:88,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),{22:[1,89]},{22:[2,68],30:[1,91],71:90},{13:[1,92]},o($Vd,[2,22],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($Vd,[2,20]),o($Vd,$Ve,{32:$Vf}),{15:[1,93]},{22:[1,94]},{10:[1,95]},{13:$Vi,20:$Vj,33:96,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:97,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:98,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:99,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:100,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:101,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:102,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:103,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:104,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:105,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:106,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:107,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:108,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:109,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:$Vi,20:$Vj,33:110,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),{13:$Vi,20:$Vj,22:[1,111],33:113,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,63:112,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{22:[1,114],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{15:[1,115]},{22:[2,67],30:[1,116]},{19:61,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,70:117},o($Vg,[2,72]),{2:$VO,13:$VP,17:$VQ,19:132,23:118,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{15:[1,143]},o($Vc,[2,78]),o($Vg,[2,75],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V_,[2,33],{45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V_,[2,34],{45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V$,[2,35],{51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V$,[2,36],{51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V$,[2,37],{51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V$,[2,38],{51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V$,[2,39],{51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V$,[2,40],{51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($V01,[2,41],{53:$VG,54:$VH,55:$VI,56:$VJ}),o($V01,[2,42],{53:$VG,54:$VH,55:$VI,56:$VJ}),o($V11,[2,43],{55:$VI,56:$VJ}),o($V11,[2,44],{55:$VI,56:$VJ}),o($VK,[2,45]),o($VK,[2,46]),o($VL,[2,54]),{22:[1,144],30:[1,145]},o($Vg,[2,63],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($VL,[2,58]),{2:$VO,13:$VP,17:$VQ,19:132,23:146,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{19:61,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,70:147},o($Vg,[2,71]),{17:[1,148]},o($V21,[2,79],{72:121,24:122,76:123,77:124,78:125,79:126,80:127,81:128,82:129,19:132,91:134,75:149,2:$VO,13:$VP,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,83:$VR,88:$VS,89:$VT,90:$VU,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ}),o($V31,[2,82]),o($V31,[2,83]),o($V31,[2,84]),o($V31,[2,85]),o($V31,[2,86]),o($V31,[2,87]),o($V31,[2,88]),o($V31,[2,89]),o($V31,[2,90]),o($V31,[2,91]),{10:[1,150]},{20:[1,152],32:[1,151]},{13:$Vu,29:33,31:34},{11:[1,153]},o($V31,[2,104],{92:154,94:155,95:156,96:157,97:$V41}),{20:[1,159]},{15:[1,160]},{20:[1,161]},{20:[1,162]},{10:[1,163]},{10:[1,164]},{10:[2,66],13:$Vi,20:$Vj,33:166,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:165},{20:[1,167]},{2:$VO,13:$VP,17:$VQ,19:132,23:168,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},o($VL,[2,55]),{13:$Vi,20:$Vj,33:169,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{17:[1,170]},o($Vg,[2,70]),o($Vc,[2,17]),o($V31,[2,81]),o($V31,[2,92]),{13:$Vi,20:$Vj,33:171,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($Vg,$Vh,{33:46,57:47,73:172,13:$Vi,20:$Vj,52:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs}),{84:[1,173]},o($V31,[2,99]),o($V31,[2,102],{95:174,96:175,97:$V41}),o($V31,[2,103]),o($V51,[2,106]),{15:[1,176],93:[1,177]},{13:$Vi,20:$Vj,33:178,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{2:$VO,13:$VP,17:$VQ,19:132,23:179,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{13:[1,182],19:181,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,109:180},{13:$Vi,20:$Vj,33:183,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($V31,[2,96]),o($V31,[2,97]),{10:[1,184]},{10:[2,65],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{13:$Vi,20:$Vj,33:185,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{17:[1,186]},o($Vg,[2,64],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ}),o($Vc,[2,13]),{10:[1,187],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{22:[1,188],30:$Vv},{11:[1,189]},o($V31,[2,101]),o($V51,[2,105]),{2:$VO,13:$VP,17:$VQ,19:132,23:190,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{20:[1,191]},{22:[1,192],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{17:[1,193]},{10:[1,194]},{13:[1,195]},{32:[1,196]},{22:[1,197],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},o($V31,[2,98]),{22:[1,198],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},o($Vc,[2,18]),o($V31,[2,73]),{10:[1,199]},{85:200,86:[1,201],87:[1,202]},{17:[1,203]},{13:$Vi,20:$Vj,33:204,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{15:[1,205]},{106:[1,206]},{13:$Vi,20:$Vj,33:207,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{32:[1,208]},{13:$Vi,20:$Vj,33:209,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{15:[1,210]},{15:[1,211]},o($V31,[2,74]),{20:[1,212]},{20:[2,94]},{20:[2,95]},o($V31,[2,107]),{22:[1,213],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{2:$VO,13:$VP,17:$VQ,19:132,23:214,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{20:[1,215]},{10:[1,216],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{13:$Vi,20:$Vj,33:217,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{10:[2,122],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{17:[2,113],99:218,100:219,101:220,102:221,103:$V61,105:$V71},{2:$VO,13:$VP,17:$VQ,19:132,23:224,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{13:$Vi,20:$Vj,33:225,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{15:[1,226]},{17:[1,227]},{13:$Vi,20:$Vj,33:228,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{13:[1,230],20:$Vj,33:231,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,110:229},{10:[2,121],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{17:[1,232]},{17:[2,111],101:233,102:234,103:$V61,105:$V71},{17:[2,112]},o($V21,[2,115]),{104:[1,235]},{13:$Vi,20:$Vj,33:236,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{17:[1,237]},{22:[1,238],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{2:$VO,13:$VP,17:$VQ,19:132,23:239,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},o($V31,[2,118]),{22:[1,240],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},{22:[1,241]},o([22,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59],$VM,{20:$VN,32:[1,242]}),{22:[2,124],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},o($V31,[2,109]),{17:[2,110]},o($V21,[2,114]),{2:$VO,13:$VP,17:$VQ,19:132,23:243,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,104:[1,244]},o($V51,[2,100]),{10:[1,245]},{17:[1,246]},{10:[1,247]},{15:[1,248]},{13:$Vi,20:$Vj,33:249,52:$Vk,57:47,60:$Vl,61:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{17:[2,117]},o($V21,$VQ,{74:119,75:120,72:121,24:122,76:123,77:124,78:125,79:126,80:127,81:128,82:129,19:132,91:134,23:250,2:$VO,13:$VP,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,83:$VR,88:$VS,89:$VT,90:$VU,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ}),o($V31,[2,93]),o($V51,[2,108]),o($V31,[2,119]),{2:$VO,13:$VP,17:$VQ,19:132,23:251,24:122,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,72:121,74:119,75:120,76:123,77:124,78:125,79:126,80:127,81:128,82:129,83:$VR,88:$VS,89:$VT,90:$VU,91:134,93:$VV,98:$VW,106:$VX,107:$VY,108:$VZ},{22:[2,123],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ},o($V21,[2,116]),{17:[1,252]},o($V31,[2,120])],
defaultActions: {7:[2,1],24:[2,24],25:[2,25],26:[2,26],27:[2,27],28:[2,28],201:[2,94],202:[2,95],220:[2,112],233:[2,110],243:[2,117]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO = require('./API_MAESTRA').TIPO;
    const TIPO_OPERACION = require('./API_MAESTRA').TIPO_OPERACION;
    const API = require('./API_MAESTRA').API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68;
break;
case 5:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67;
break;
case 6:return 34;
break;
case 7:return 38;
break;
case 8:return 36;
break;
case 9:return 37;
break;
case 10:return 35;
break;
case 11:return 8;
break;
case 12:return 14;
break;
case 13:return 25;
break;
case 14:return 28;
break;
case 15:return 93;
break;
case 16:return 97;
break;
case 17:return 98;
break;
case 18:return 108;
break;
case 19:return 106;
break;
case 20:return 107;
break;
case 21:return 88;
break;
case 22:return 89;
break;
case 23:return 90;
break;
case 24:return 41;
break;
case 25:return 40;
break;
case 26:return 42;
break;
case 27:return 83;
break;
case 28:return 84;
break;
case 29:return 87;
break;
case 30:return 86;
break;
case 31:return 64;
break;
case 32:return 65;
break;
case 33:return 103;
break;
case 34:return 105;
break;
case 35:return 104;
break;
case 36:return 10;
break;
case 37:return 15;
break;
case 38:return 17;
break;
case 39:return 20;
break;
case 40:return 22;
break;
case 41:return 11;
break;
case 42:return 'S_ComillaSimple';
break;
case 43:return 30;
break;
case 44:return 'S_ComillaDoble';
break;
case 45:return 59;
break;
case 46:return 58;
break;
case 47:return 51;
break;
case 48:return 52;
break;
case 49:return 53;
break;
case 50:return 54;
break;
case 51:return 55;
break;
case 52:return 56;
break;
case 53:return 48;
break;
case 54:return 46;
break;
case 55:return 45;
break;
case 56:return 32;
break;
case 57:return 50;
break;
case 58:return 49;
break;
case 59:return 47;
break;
case 60:return 60;
break;
case 61:return 43;
break;
case 62:return 44;
break;
case 63:return 62;
break;
case 64:return 61;
break;
case 65:return 13;
break;
case 66:return 5;
break;
case 67:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][\\][\"\'nrt\\][\'])/,/^(?:[\'][^\'\\\"][\'])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AnalizadorLSJava;
exports.Parser = AnalizadorLSJava.Parser;
exports.parse = function () { return AnalizadorLSJava.parse.apply(AnalizadorLSJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
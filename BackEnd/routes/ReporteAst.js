/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ReporteAst = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[2,5,10,16],$V4=[1,14],$V5=[12,13],$V6=[1,27],$V7=[1,33],$V8=[1,25],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[2,15,19,28,37,38,39,40,41],$Vf=[12,33],$Vg=[2,29],$Vh=[1,44],$Vi=[25,33],$Vj=[2,83],$Vk=[1,56],$Vl=[1,59],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,57],$Vr=[1,58],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[2,75],$Vw=[1,68],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[12,25,33,46,47,48,49,50,51,52,53,54,55,56,57,58,59,107],$VN=[12,25,33,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,107],$VO=[2,65],$VP=[1,91],$VQ=[1,134],$VR=[1,135],$VS=[2,86],$VT=[1,137],$VU=[1,143],$VV=[1,144],$VW=[1,145],$VX=[1,146],$VY=[1,142],$VZ=[1,139],$V_=[1,140],$V$=[1,141],$V01=[12,25,33,46,47,107],$V11=[12,25,33,46,47,48,49,50,51,52,53,107],$V21=[12,25,33,46,47,48,49,50,51,52,53,54,55,107],$V31=[12,25,33,46,47,48,49,50,51,52,53,54,55,56,57,107],$V41=[19,106,108],$V51=[2,15,19,37,38,39,40,41,86,91,92,93,96,101,106,108,109,110,111],$V61=[1,161],$V71=[2,15,19,37,38,39,40,41,86,91,92,93,96,100,101,106,108,109,110,111],$V81=[1,226],$V91=[1,225];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"CONTENIDOP":6,"SINTAXISCONTENIDO":7,"IMPORT":8,"CLASES":9,"R_Import":10,"LISTADO_IMPORT":11,"S_PuntoComa":12,"S_Punto":13,"DEFINE_IMPORT":14,"Identificador":15,"R_Class":16,"S_LlaveAbre":17,"PN":18,"S_LlaveCierra":19,"LISTA_CLASES":20,"CONTENIDO_CLASE":21,"TIPO_DATO":22,"S_ParentesisAbre":23,"PARAMETROS":24,"S_ParentesisCierra":25,"INSTRUCCIONES":26,"VARIABLE":27,"R_Void":28,"METODO_VOID":29,"LLAMAR_METODOF_CLASE":30,"R_Main":31,"LISTADO_ID_VARIABLE":32,"S_Coma":33,"CONTENIDO_VARIABLE":34,"S_Igual":35,"EXPRESION_G":36,"T_Int":37,"T_String":38,"T_Boolean":39,"T_Char":40,"T_Double":41,"MODIFICADORES_ACCESO":42,"R_Protected":43,"R_Public":44,"R_Private":45,"LOG_Concatenar":46,"LOG_OR":47,"REL_IgualIgual":48,"REL_MayorIgualQue":49,"REL_MayorQue":50,"REL_MenorIgualQue":51,"REL_MenorQue":52,"REL_Distinto":53,"OP_Mas":54,"OP_Menos":55,"OP_Multiplicacion":56,"OP_Division":57,"OP_Potencia":58,"OP_Modulo":59,"CONTENIDO_EXPRESION":60,"OP_Decremento":61,"OP_Incremento":62,"LOG_Not":63,"Entero":64,"Decimal":65,"OPCIONAL":66,"R_True":67,"R_False":68,"Cadena":69,"Char":70,"CHAR_Especial":71,"FUNC":72,"DEFINIR_PARAMETRO":73,"LISTA_PARAMETROS":74,"METODOS_LL":75,"PARAMETROS_FUNC":76,"LISTA_INS":77,"LISTA_INSTRUCCIONES":78,"IMPRIMIR":79,"SENT_IF":80,"LOOP_WHILE":81,"LOOP_DO_WHILE":82,"LOOP_FOR":83,"SENT_SWITCH":84,"S_TRANSFERENCIA":85,"R_System":86,"R_Out":87,"TIPO_IMPRESION":88,"R_Print":89,"R_Println":90,"R_Break":91,"R_Continue":92,"R_Return":93,"IF_FIJO":94,"DEF_IF":95,"R_If":96,"LISTADO_ELSI":97,"ELSE_FIJO":98,"ELSE_IF":99,"R_Else":100,"R_Switch":101,"LISTA_CASE":102,"LS_CASE":103,"RED_SWITCH":104,"DEF_CASE":105,"R_Case":106,"S_DosPuntos":107,"def":108,"R_While":109,"R_Do":110,"R_For":111,"CONT_FOR":112,"FIN_FOR":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Import",12:"S_PuntoComa",13:"S_Punto",15:"Identificador",16:"R_Class",17:"S_LlaveAbre",19:"S_LlaveCierra",23:"S_ParentesisAbre",25:"S_ParentesisCierra",28:"R_Void",31:"R_Main",33:"S_Coma",35:"S_Igual",37:"T_Int",38:"T_String",39:"T_Boolean",40:"T_Char",41:"T_Double",43:"R_Protected",44:"R_Public",45:"R_Private",46:"LOG_Concatenar",47:"LOG_OR",48:"REL_IgualIgual",49:"REL_MayorIgualQue",50:"REL_MayorQue",51:"REL_MenorIgualQue",52:"REL_MenorQue",53:"REL_Distinto",54:"OP_Mas",55:"OP_Menos",56:"OP_Multiplicacion",57:"OP_Division",58:"OP_Potencia",59:"OP_Modulo",61:"OP_Decremento",62:"OP_Incremento",63:"LOG_Not",64:"Entero",65:"Decimal",67:"R_True",68:"R_False",69:"Cadena",70:"Char",71:"CHAR_Especial",86:"R_System",87:"R_Out",89:"R_Print",90:"R_Println",91:"R_Break",92:"R_Continue",93:"R_Return",96:"R_If",100:"R_Else",101:"R_Switch",106:"R_Case",107:"S_DosPuntos",108:"def",109:"R_While",110:"R_Do",111:"R_For"},
productions_: [0,[3,2],[4,1],[4,0],[6,1],[6,2],[7,1],[7,1],[7,1],[8,3],[11,3],[11,1],[14,1],[9,5],[18,1],[18,0],[20,2],[20,1],[21,8],[21,1],[21,2],[21,1],[21,1],[29,6],[29,7],[27,3],[32,3],[32,1],[34,3],[34,1],[22,1],[22,1],[22,1],[22,1],[22,1],[42,1],[42,1],[42,1],[42,0],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,2],[36,2],[36,1],[60,1],[60,1],[60,3],[60,4],[60,1],[60,1],[60,3],[60,1],[60,1],[60,1],[60,1],[66,1],[66,3],[72,1],[72,0],[24,2],[24,1],[24,0],[74,3],[74,2],[73,2],[75,4],[75,5],[76,3],[76,1],[76,0],[30,5],[26,1],[26,0],[77,2],[77,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[79,9],[88,1],[88,1],[85,2],[85,2],[85,3],[80,2],[94,7],[95,2],[95,1],[95,1],[95,0],[97,2],[97,1],[98,4],[99,8],[84,7],[102,2],[102,1],[102,1],[102,0],[103,2],[103,1],[105,4],[104,3],[81,7],[82,9],[83,11],[112,4],[112,3],[113,3],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1];
break;
case 3: case 15: case 72: case 75: case 83: case 86: case 110: case 119:
 this.$ = [{text:'undefined',icon:'./img/hoja.png'}]; 
break;
case 4:
if($$[$0]!=''){this.$ = [$$[$0]];}else{this.$ = [];}
break;
case 5: case 16: case 87:
if($$[$0]!=''){$$[$0-1].push($$[$0])}; this.$ = $$[$0-1];
break;
case 8: case 22:
this.$ ='';erroresSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 9:
this.$ = API.n_Import($$[$0-1]);
break;
case 10:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2];
break;
case 11: case 69: case 74: case 82:
this.$ = [$$[$0]];
break;
case 12:
this.$ = API.n_Ident($$[$0]);
break;
case 13:
this.$ = API.n_Clase($$[$0-3],$$[$0-1]);
break;
case 17:
if($$[$0]==''){this.$ = [];}else{this.$ = [$$[$0]];}
break;
case 18:
this.$ =API.n_Metodo_Funcion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 19: case 21:
this.$=1;
break;
case 20:
this.$ =$$[$0];
break;
case 23:
this.$ = API.n_Metodo_Principal($$[$0-1]);
break;
case 24:
this.$ = API.n_Metodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 25:
this.$ = API.n_Declaracion($$[$0-2] , $$[$0-1]);
break;
case 26:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 27:
this.$ = [$$[$0]]
break;
case 28:
this.$ = API.n_Variable($$[$0-2],$$[$0])
break;
case 29:
this.$ = API.n_Variable($$[$0],'undefined')
break;
case 30:
this.$ = TIPO.INT; 
break;
case 31:
this.$ = TIPO.STRING; 
break;
case 32:
this.$ = TIPO.BOOLEAN; 
break;
case 33:
this.$ = TIPO.CHAR; 
break;
case 34:
this.$ = TIPO.DOUBLE; 
break;
case 35: case 36: case 37: case 71: case 85:
this.$ = $$[$0];
break;
case 38:
 this.$ = 'undefined'; 
break;
case 39:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 40:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 41:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 42:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL_QUE); 
break;
case 43:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE); 
break;
case 44:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL_QUE); 
break;
case 45:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE); 
break;
case 46:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 47:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 48:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 49:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 50:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 51:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 52:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 53:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 54:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.INCREMENTO); 
break;
case 55:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NEGATIVO); 
break;
case 56:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NOT); 
break;
case 57:
 this.$ = $$[$0]; 
break;
case 58:
this.$ = API.n_Dato($$[$0],TIPO.INT); 
break;
case 59:
this.$ = API.n_Dato($$[$0],TIPO.DOUBLE); 
break;
case 60:
this.$ = API.n_Funcion($$[$0-2],'undefined');
break;
case 61:
this.$ = API.n_Funcion($$[$0-3],$$[$0-1]);
break;
case 62: case 63:
this.$ = API.n_Dato($$[$0],TIPO.BOOLEAN); 
break;
case 64:
this.$ = $$[$0-1];
break;
case 65:
this.$ = API.n_Dato($$[$0],TIPO.IDENTIFICADOR); 
break;
case 66:
this.$ = API.n_Dato($$[$0],TIPO.STRING); 
break;
case 67: case 68:
this.$ = API.n_Dato($$[$0],TIPO.CHAR); 
break;
case 70:
$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 73:

        var obj_if = []; 
        if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        }else if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
        } 
    
break;
case 76:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 77:
this.$ =[$$[$0]];
break;
case 78:
this.$ = API.n_ParametroM($$[$0-1],$$[$0]);
break;
case 79:
this.$ = API.n_Asignacion($$[$0-3],$$[$0-1]);
break;
case 80:
this.$ = API.n_Funcion($$[$0-4],$$[$0-2]);
break;
case 81:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 84:
this.$ = API.n_Funcion($$[$0-4],API.n_Parametro($$[$0-2]));
break;
case 88:

        if(Array.isArray($$[$0])){
            if($$[$0]!=''){
                this.$ = $$[$0];
            }else{
                this.$ = [];
            }
            }else{
                if($$[$0]!=''){
                  this.$ = [$$[$0]];
                }else{
                    this.$=[];
                }
            }
        
break;
case 92:
 this.$ = API.cont_If($$[$0]);
break;
case 98:
this.$ =''; erroresSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 99:
this.$ = API.n_Impresion($$[$0-4],$$[$0-2]);
break;
case 100:
this.$ = INSTRUCCIONES_CONST.IMPRIMIR;
break;
case 101:
this.$ = INSTRUCCIONES_CONST.IMPRIMIR_LN;
break;
case 102:
 this.$ = API.n_Break(); 
break;
case 103:
 this.$ = API.n_Continue(); 
break;
case 104:
 this.$ = API.n_Return($$[$0-1]); 
break;
case 105:
 
        var obj_if = []; 
        if($$[$0] !=null){
            if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
                $$[$0-1].push($$[$0]); 
                this.$ = $$[$0-1];
            }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
                $$[$0].unshift($$[$0-1]); 
                this.$ = $$[$0];
            } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
            }
        }else{
            this.$ = $$[$0-1];
        }
    
break;
case 106:
this.$ = API.n_If($$[$0-4],$$[$0-1]);
break;
case 107: case 116:
 
        var obj_if = []; 
        if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        } else{
            obj_if.push($$[$0]);
            obj_if.unshift($$[$0-1]);
            this.$ = obj_if;
        }
    
break;
case 108: case 117:
  
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        }
    
break;
case 109: case 118:
 
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        } 
    
break;
case 111: case 120:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 112: case 121:
 this.$ = [$$[$0]];  
break;
case 113:
 this.$ = API.n_Else($$[$0-1]);  
break;
case 114:
 this.$ = API.n_ElseIf($$[$0-4],$$[$0-1]); 
break;
case 115:
this.$ = API.n_Switch($$[$0-4],$$[$0-1]); 
break;
case 122:
this.$ = API.n_Case($$[$0-2],$$[$0]);
break;
case 123:
this.$ = API.n_Default($$[$0]);
break;
case 124:
this.$ = API.n_While($$[$0-4],$$[$0-1]);
break;
case 125:
 this.$ = API.n_DoWhile($$[$0-6],$$[$0-2]); 
break;
case 126:
 this.$ = API.n_For( $$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]); 
break;
case 127:
this.$ = API.n_Declaracion($$[$0-3] , [API.n_Variable($$[$0-2],$$[$0])]);
break;
case 128: case 129:
this.$ = API.n_Asignacion($$[$0-2],$$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:$V1,16:$V2},{1:[3]},{5:[1,10]},{2:$V0,5:[2,2],7:11,8:5,9:6,10:$V1,16:$V2},o($V3,[2,4]),o($V3,[2,6]),o($V3,[2,7]),o($V3,[2,8]),{11:12,14:13,15:$V4},{15:[1,15]},{1:[2,1]},o($V3,[2,5]),{12:[1,16],13:[1,17]},o($V5,[2,11]),o($V5,[2,12]),{17:[1,18]},o($V3,[2,9]),{14:19,15:$V4},{2:$V6,15:$V7,18:20,19:[2,15],20:21,21:22,22:23,27:24,28:$V8,30:26,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},o($V5,[2,10]),{19:[1,34]},{2:$V6,15:$V7,19:[2,14],21:35,22:23,27:24,28:$V8,30:26,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},o($Ve,[2,17]),{15:[1,36],32:37,34:38},o($Ve,[2,19]),{15:[1,41],29:39,31:[1,40]},o($Ve,[2,21]),o($Ve,[2,22]),{15:[2,30]},{15:[2,31]},{15:[2,32]},{15:[2,33]},{15:[2,34]},{23:[1,42]},o($V3,[2,13]),o($Ve,[2,16]),o($Vf,$Vg,{23:[1,43],35:$Vh}),{12:[1,45],33:[1,46]},o($Vf,[2,27]),o($Ve,[2,20]),{23:[1,47]},{23:[1,48]},o($Vi,$Vj,{76:49,36:50,60:51,15:$Vk,23:$Vl,55:$Vm,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu}),{22:65,24:63,25:$Vv,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,73:64},{15:$Vk,23:$Vl,36:66,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o([2,15,19,28,37,38,39,40,41,86,91,92,93,96,101,106,108,109,110,111],[2,25]),{15:$Vw,34:67},{25:[1,69]},{22:65,24:70,25:$Vv,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,73:64},{25:[1,71],33:$Vx},o($Vi,[2,82],{46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($VM,[2,57],{61:[1,87],62:[1,88]}),{15:$Vk,23:$Vl,36:89,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:90,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VN,[2,58]),o($VN,[2,59]),o($VN,$VO,{23:$VP}),o($VN,[2,62]),o($VN,[2,63]),{15:$Vk,23:$Vl,36:92,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VN,[2,66]),o($VN,[2,67]),o($VN,[2,68]),{25:[1,93]},{25:[2,74],33:[1,95],74:94},{15:[1,96]},o($Vf,[2,28],{46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($Vf,[2,26]),o($Vf,$Vg,{35:$Vh}),{17:[1,97]},{25:[1,98]},{12:[1,99]},{15:$Vk,23:$Vl,36:100,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:101,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:102,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:103,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:104,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:105,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:106,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:107,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:108,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:109,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:110,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:111,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:112,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:113,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:$Vk,23:$Vl,36:114,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VM,[2,53]),o($VM,[2,54]),o($VM,[2,55]),o($VM,[2,56]),{15:$Vk,23:$Vl,25:[1,115],36:117,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,66:116,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{25:[1,118],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{17:[1,119]},{25:[2,73],33:[1,120]},{22:65,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,73:121},o($Vi,[2,78]),{2:$VQ,15:$VR,19:$VS,22:136,26:122,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{17:[1,147]},o($Ve,[2,84]),o($Vi,[2,81],{46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V01,[2,39],{48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V01,[2,40],{48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V11,[2,41],{54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V11,[2,42],{54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V11,[2,43],{54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V11,[2,44],{54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V11,[2,45],{54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V11,[2,46],{54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($V21,[2,47],{56:$VI,57:$VJ,58:$VK,59:$VL}),o($V21,[2,48],{56:$VI,57:$VJ,58:$VK,59:$VL}),o($V31,[2,49],{58:$VK,59:$VL}),o($V31,[2,50],{58:$VK,59:$VL}),o($VM,[2,51]),o($VM,[2,52]),o($VN,[2,60]),{25:[1,148],33:[1,149]},o($Vi,[2,69],{46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($VN,[2,64]),{2:$VQ,15:$VR,19:$VS,22:136,26:150,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{22:65,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,73:151},o($Vi,[2,77]),{19:[1,152]},o($V41,[2,85],{75:125,27:126,79:127,80:128,81:129,82:130,83:131,84:132,85:133,22:136,94:138,78:153,2:$VQ,15:$VR,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,86:$VT,91:$VU,92:$VV,93:$VW,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$}),o($V51,[2,88]),o($V51,[2,89]),o($V51,[2,90]),o($V51,[2,91]),o($V51,[2,92]),o($V51,[2,93]),o($V51,[2,94]),o($V51,[2,95]),o($V51,[2,96]),o($V51,[2,97]),o($V51,[2,98]),{23:[1,155],35:[1,154]},{15:$Vw,32:37,34:38},{13:[1,156]},o($V51,[2,110],{95:157,97:158,98:159,99:160,100:$V61}),{23:[1,162]},{17:[1,163]},{23:[1,164]},{23:[1,165]},{12:[1,166]},{12:[1,167]},{12:[2,72],15:$Vk,23:$Vl,36:169,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:168},{23:[1,170]},{2:$VQ,15:$VR,19:$VS,22:136,26:171,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},o($VN,[2,61]),{15:$Vk,23:$Vl,36:172,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{19:[1,173]},o($Vi,[2,76]),o($Ve,[2,23]),o($V51,[2,87]),{15:$Vk,23:$Vl,36:174,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($Vi,$Vj,{36:50,60:51,76:175,15:$Vk,23:$Vl,55:$Vm,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu}),{87:[1,176]},o($V51,[2,105]),o($V51,[2,108],{98:177,99:178,100:$V61}),o($V51,[2,109]),o($V71,[2,112]),{17:[1,179],96:[1,180]},{15:$Vk,23:$Vl,36:181,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{2:$VQ,15:$VR,19:$VS,22:136,26:182,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{15:[1,185],22:184,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,112:183},{15:$Vk,23:$Vl,36:186,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($V51,[2,102]),o($V51,[2,103]),{12:[1,187]},{12:[2,71],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{15:$Vk,23:$Vl,36:188,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{19:[1,189]},o($Vi,[2,70],{46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL}),o($Ve,[2,18]),{12:[1,190],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{25:[1,191],33:$Vx},{13:[1,192]},o($V51,[2,107]),o($V71,[2,111]),{2:$VQ,15:$VR,19:$VS,22:136,26:193,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{23:[1,194]},{25:[1,195],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{19:[1,196]},{12:[1,197]},{15:[1,198]},{35:[1,199]},{25:[1,200],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},o($V51,[2,104]),{25:[1,201],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},o($Ve,[2,24]),o($V51,[2,79]),{12:[1,202]},{88:203,89:[1,204],90:[1,205]},{19:[1,206]},{15:$Vk,23:$Vl,36:207,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{17:[1,208]},{109:[1,209]},{15:$Vk,23:$Vl,36:210,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{35:[1,211]},{15:$Vk,23:$Vl,36:212,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{17:[1,213]},{17:[1,214]},o($V51,[2,80]),{23:[1,215]},{23:[2,100]},{23:[2,101]},o($V51,[2,113]),{25:[1,216],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{2:$VQ,15:$VR,19:$VS,22:136,26:217,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{23:[1,218]},{12:[1,219],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{15:$Vk,23:$Vl,36:220,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{12:[2,128],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{19:[2,119],102:221,103:222,104:223,105:224,106:$V81,108:$V91},{2:$VQ,15:$VR,19:$VS,22:136,26:227,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{15:$Vk,23:$Vl,36:228,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{17:[1,229]},{19:[1,230]},{15:$Vk,23:$Vl,36:231,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{15:[1,233],23:$Vl,36:234,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,113:232},{12:[2,127],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{19:[1,235]},{19:[2,117],104:236,105:237,106:$V81,108:$V91},{19:[2,118]},o($V41,[2,121]),{107:[1,238]},{15:$Vk,23:$Vl,36:239,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{19:[1,240]},{25:[1,241],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{2:$VQ,15:$VR,19:$VS,22:136,26:242,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},o($V51,[2,124]),{25:[1,243],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},{25:[1,244]},o([25,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62],$VO,{23:$VP,35:[1,245]}),{25:[2,130],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},o($V51,[2,115]),{19:[2,116]},o($V41,[2,120]),{2:$VQ,15:$VR,19:$VS,22:136,26:246,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,107:[1,247]},o($V71,[2,106]),{12:[1,248]},{19:[1,249]},{12:[1,250]},{17:[1,251]},{15:$Vk,23:$Vl,36:252,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{19:[2,123]},o($V41,$VS,{77:123,78:124,75:125,27:126,79:127,80:128,81:129,82:130,83:131,84:132,85:133,22:136,94:138,26:253,2:$VQ,15:$VR,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,86:$VT,91:$VU,92:$VV,93:$VW,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$}),o($V51,[2,99]),o($V71,[2,114]),o($V51,[2,125]),{2:$VQ,15:$VR,19:$VS,22:136,26:254,27:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,75:125,77:123,78:124,79:127,80:128,81:129,82:130,83:131,84:132,85:133,86:$VT,91:$VU,92:$VV,93:$VW,94:138,96:$VX,101:$VY,109:$VZ,110:$V_,111:$V$},{25:[2,129],46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL},o($V41,[2,122]),{19:[1,255]},o($V51,[2,126])],
defaultActions: {10:[2,1],28:[2,30],29:[2,31],30:[2,32],31:[2,33],32:[2,34],204:[2,100],205:[2,101],223:[2,118],236:[2,116],246:[2,123]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO = require('./Api_ReporteAst').TIPO;
    const TIPO_OPERACION = require('./Api_ReporteAst').TIPO_OPERACION;
    const INSTRUCCIONES_CONST = require('./Api_ReporteAst').TIPO_INSTRUCCION;
    const API = require('./Api_ReporteAst').API;
    let erroresLexicos = [];
    let erroresSintacticos = [];
    let erroresLexicosYSintacticos = [];

    exports.errL = function(){
        return erroresLexicos;
    }

    exports.errS = function(){
        return erroresSintacticos;
    }

    exports.LimpiarV = function(){
        erroresLexicos = [];
        erroresSintacticos = [];
        erroresLexicosYSintacticos = [];
    }

    exports.errLS = function(){
        return erroresLexicosYSintacticos;
    } 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 71;
break;
case 5:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70;
break;
case 6:return 37;
break;
case 7:return 41;
break;
case 8:return 39;
break;
case 9:return 40;
break;
case 10:return 38;
break;
case 11:return 10;
break;
case 12:return 16;
break;
case 13:return 28;
break;
case 14:return 31;
break;
case 15:return 96;
break;
case 16:return 100;
break;
case 17:return 101;
break;
case 18:return 111;
break;
case 19:return 109;
break;
case 20:return 110;
break;
case 21:return 91;
break;
case 22:return 92;
break;
case 23:return 93;
break;
case 24:return 44;
break;
case 25:return 43;
break;
case 26:return 45;
break;
case 27:return 86;
break;
case 28:return 87;
break;
case 29:return 90;
break;
case 30:return 89;
break;
case 31:return 67;
break;
case 32:return 68;
break;
case 33:return 106;
break;
case 34:return 108;
break;
case 35:return 107;
break;
case 36:return 12;
break;
case 37:return 17;
break;
case 38:return 19;
break;
case 39:return 23;
break;
case 40:return 25;
break;
case 41:return 13;
break;
case 42:return 'S_ComillaSimple';
break;
case 43:return 33;
break;
case 44:return 'S_ComillaDoble';
break;
case 45:return 62;
break;
case 46:return 61;
break;
case 47:return 54;
break;
case 48:return 55;
break;
case 49:return 56;
break;
case 50:return 57;
break;
case 51:return 58;
break;
case 52:return 59;
break;
case 53:return 51;
break;
case 54:return 49;
break;
case 55:return 48;
break;
case 56:return 35;
break;
case 57:return 53;
break;
case 58:return 52;
break;
case 59:return 50;
break;
case 60:return 63;
break;
case 61:return 46;
break;
case 62:return 47;
break;
case 63:return 65;
break;
case 64:return 64;
break;
case 65:return 15;
break;
case 66:return 5;
break;
case 67:erroresLexicos.push({Tipo_Error: 'Error_Lexico',Error : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Lexico ', Error  : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][\\][\"\'nrt\\][\'])/,/^(?:[\'][^\'\\\"][\'])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ReporteAst;
exports.Parser = ReporteAst.Parser;
exports.parse = function () { return ReporteAst.parse.apply(ReporteAst, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
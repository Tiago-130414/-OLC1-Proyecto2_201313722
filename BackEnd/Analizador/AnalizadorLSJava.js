/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AnalizadorLSJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[2,31],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[5,9,14,39,40,41],$V6=[1,13],$V7=[11,12],$V8=[1,33],$V9=[1,26],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[13,17,24,34,35,36,37,38],$Vg=[11,30],$Vh=[2,22],$Vi=[1,44],$Vj=[22,30],$Vk=[2,61],$Vl=[1,54],$Vm=[1,52],$Vn=[1,51],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[2,54],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[11,22,30,42,43,44,45,46,47],$VE=[1,99],$VF=[11,22,30,42,43],$VG=[11,22,30,42,43,44,45,47],$VH=[1,106],$VI=[13,17];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"IMPORT":6,"MODIFICADORES_ACCESO":7,"CLASES":8,"R_Import":9,"LISTADO_IMPORT":10,"S_PuntoComa":11,"S_Punto":12,"Identificador":13,"R_Class":14,"S_LlaveAbre":15,"LISTA_CLASES":16,"S_LlaveCierra":17,"CONTENIDO_CLASE":18,"TIPO_DATO":19,"S_ParentesisAbre":20,"PARAMETROS":21,"S_ParentesisCierra":22,"VARIABLE":23,"R_Void":24,"METODO_VOID":25,"LLAMAR_METODOF_CLASE":26,"R_Main":27,"METODOS_LL":28,"LISTADO_ID_VARIABLE":29,"S_Coma":30,"CONTENIDO_VARIABLE":31,"S_Igual":32,"EXPRESION":33,"T_Int":34,"T_String":35,"T_Boolean":36,"T_Char":37,"T_Double":38,"R_Protected":39,"R_Public":40,"R_Private":41,"OP_Mas":42,"OP_Menos":43,"OP_Multiplicacion":44,"OP_Division":45,"OP_Potencia":46,"OP_Modulo":47,"TERMINAL":48,"Cadena":49,"Decimal":50,"Entero":51,"Char":52,"R_True":53,"R_False":54,"CHAR_Especial":55,"FUNC":56,"LISTA_PARAMETROS":57,"PARAMETROS_FUNC":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_Import",11:"S_PuntoComa",12:"S_Punto",13:"Identificador",14:"R_Class",15:"S_LlaveAbre",17:"S_LlaveCierra",20:"S_ParentesisAbre",22:"S_ParentesisCierra",24:"R_Void",27:"R_Main",30:"S_Coma",32:"S_Igual",34:"T_Int",35:"T_String",36:"T_Boolean",37:"T_Char",38:"T_Double",39:"R_Protected",40:"R_Public",41:"R_Private",42:"OP_Mas",43:"OP_Menos",44:"OP_Multiplicacion",45:"OP_Division",46:"OP_Potencia",47:"OP_Modulo",49:"Cadena",50:"Decimal",51:"Entero",52:"Char",53:"R_True",54:"R_False",55:"CHAR_Especial"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[6,3],[10,3],[10,1],[8,5],[16,2],[16,1],[18,7],[18,1],[18,2],[18,1],[25,6],[25,7],[23,3],[29,3],[29,1],[31,3],[31,1],[19,1],[19,1],[19,1],[19,1],[19,1],[7,1],[7,1],[7,1],[7,0],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,4],[56,1],[56,0],[21,3],[21,2],[21,0],[57,4],[57,3],[28,6],[28,5],[58,3],[58,1],[58,0],[26,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("ANALISIS FINALIZADO");
break;
case 2:
console.log($$[$0]);
break;
case 3:
console.log($$[$0] + "\n"); 
break;
case 4:
console.log( $$[$0-1]+' '+$$[$0] + "\n");
break;
case 5:
console.log($$[$0-1]+' ' + $$[$0] + "\n");
break;
case 6:
this.$ = $$[$0-2] +' '+ $$[$0-1]+ $$[$0];
break;
case 7: case 19:
this.$ = $$[$0-2] + $$[$0-1]+ $$[$0];
break;
case 8: case 11: case 20: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 60:
this.$ = $$[$0];
break;
case 9:
this.$ = $$[$0-4]+ $$[$0-3] + $$[$0-2]+"\n" +$$[$0-1] +"\n"+$$[$0] ;
break;
case 10: case 38:
this.$ = $$[$0-1] + $$[$0];
break;
case 12:
this.$ = $$[$0-6] +' '+ $$[$0-5] + $$[$0-4] +$$[$0-3] +$$[$0-2] +$$[$0-1]+"\n" + $$[$0]+"\n";
break;
case 13:
console.log($$[$0]+ "\n");
break;
case 14:
this.$ = $$[$0-1] +' '+ $$[$0];
break;
case 15:
console.log($$[$0])
break;
case 16:
this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] +$$[$0-2] +"\n"+ $$[$0-1] +"\n"+ $$[$0];
break;
case 17:
this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] +$$[$0-3] + $$[$0-2] +"\n" + $$[$0-1]+"\n" + $$[$0];
break;
case 18:
this.$ = $$[$0-2] + ' ' + $$[$0-1]+ $$[$0]+"\n";
break;
case 21: case 32: case 33: case 34: case 35: case 36: case 37: case 39:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 49:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 52: case 56:
this.$ = $$[$0-2] +" "+ $$[$0-1] +$$[$0];
break;
case 53:
this.$ = $$[$0-1] +" "+ $$[$0];
break;
case 55:
this.$ = $$[$0-3] + $$[$0-2] +" " +$$[$0-1] + $$[$0];
break;
case 57:
this.$ = $$[$0-5] + $$[$0-4] +$$[$0-3] + $$[$0-2] +$$[$0-1] + $$[$0]+"\n";
break;
case 58:
this.$ = $$[$0-4] + $$[$0-3] +$$[$0-2] + $$[$0-1] +$$[$0]+"\n";
break;
case 59:
this.$ = $$[$0-2] + $$[$0-1] +$$[$0];
break;
case 62:
this.$ = $$[$0-4] + $$[$0-3] +$$[$0-2] + $$[$0-1] +$$[$0] + "\n";
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:$V0,14:$V1,39:$V2,40:$V3,41:$V4},{1:[3]},{5:[1,9],6:10,7:11,9:$V0,14:$V1,39:$V2,40:$V3,41:$V4},o($V5,[2,3]),{8:12,14:$V6},{10:14,13:[1,15]},{14:[2,28]},{14:[2,29]},{14:[2,30]},{1:[2,1]},o($V5,[2,2]),{8:16,14:$V6},o($V5,[2,5]),{13:[1,17]},{11:[1,18],12:[1,19]},o($V7,[2,8]),o($V5,[2,4]),{15:[1,20]},o($V5,[2,6]),{13:[1,21]},{13:$V8,16:22,18:23,19:24,23:25,24:$V9,26:27,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve},o($V7,[2,7]),{13:$V8,17:[1,34],18:35,19:24,23:25,24:$V9,26:27,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve},o($Vf,[2,11]),{13:[1,36],29:37,31:38},o($Vf,[2,13]),{13:[1,41],25:39,27:[1,40]},o($Vf,[2,15]),{13:[2,23]},{13:[2,24]},{13:[2,25]},{13:[2,26]},{13:[2,27]},{20:[1,42]},o($V5,[2,9]),o($Vf,[2,10]),o($Vg,$Vh,{20:[1,43],32:$Vi}),{11:[1,45],30:[1,46]},o($Vg,[2,20]),o($Vf,[2,14]),{20:[1,47]},{20:[1,48]},o($Vj,$Vk,{58:49,33:50,48:53,13:$Vl,20:$Vm,43:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu}),{19:63,21:62,22:$Vv,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve},{13:$Vl,20:$Vm,33:64,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},o($Vf,[2,18]),{13:[1,66],31:65},{22:[1,67]},{19:63,21:68,22:$Vv,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve},{22:[1,69],30:$Vw},o($Vj,[2,60],{42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),{13:$Vl,20:$Vm,33:77,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:78,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},o($VD,[2,40]),o($VD,[2,41],{20:[1,79]}),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),{22:[1,80]},{13:[1,81]},o($Vg,[2,21],{42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($Vg,[2,19]),o($Vg,$Vh,{32:$Vi}),{15:[1,82]},{22:[1,83]},{11:[1,84]},{13:$Vl,20:$Vm,33:85,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:86,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:87,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:88,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:89,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:90,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},{13:$Vl,20:$Vm,33:91,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu},o($VD,[2,38]),{22:[1,92],42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC},{13:$Vl,20:$Vm,22:[2,51],33:94,43:$Vn,48:53,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:93},{15:[1,95]},{22:[2,53],30:[1,97],57:96},{13:$VE,28:98},{15:[1,100]},o($Vf,[2,62]),o($Vj,[2,59],{42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($VF,[2,32],{44:$Vz,45:$VA,46:$VB,47:$VC}),o($VF,[2,33],{44:$Vz,45:$VA,46:$VB,47:$VC}),o($VG,[2,34],{46:$VB}),o($VG,[2,35],{46:$VB}),o($VD,[2,36]),o($VG,[2,37],{46:$VB}),o($VD,[2,39]),{22:[1,101]},{22:[2,50],42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC},{17:[1,102]},{22:[2,52],30:[1,103]},{19:104,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve},{13:$VH,17:[1,105]},{20:[1,107]},{13:$VE,28:108},o($VD,[2,49]),o($Vf,[2,12]),{19:109,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve},{13:[1,110]},o($Vf,[2,16]),{20:[1,111]},o($Vj,$Vk,{33:50,48:53,58:112,13:$Vl,20:$Vm,43:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu}),{13:$VH,17:[1,113]},{13:[1,114]},o($Vj,[2,56]),o($Vj,$Vk,{33:50,48:53,58:115,13:$Vl,20:$Vm,43:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu}),{22:[1,116],30:$Vw},o($Vf,[2,17]),o($Vj,[2,55]),{22:[1,117],30:$Vw},{11:[1,118]},{11:[1,119]},o($VI,[2,58]),o($VI,[2,57])],
defaultActions: {6:[2,28],7:[2,29],8:[2,30],9:[2,1],28:[2,23],29:[2,24],30:[2,25],31:[2,26],32:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:return 34;
break;
case 4:return 38;
break;
case 5:return 36;
break;
case 6:return 37;
break;
case 7:return 35;
break;
case 8:return 9;
break;
case 9:return 14;
break;
case 10:return 24;
break;
case 11:return 27;
break;
case 12:return 'R_If';
break;
case 13:return 'R_Else';
break;
case 14:return 'R_Switch';
break;
case 15:return 'R_For';
break;
case 16:return 'R_While';
break;
case 17:return 'R_Do';
break;
case 18:return 'R_Break';
break;
case 19:return 'R_Continue';
break;
case 20:return 'R_Return';
break;
case 21:return 40;
break;
case 22:return 39;
break;
case 23:return 41;
break;
case 24:return 'R_System';
break;
case 25:return 'R_Out';
break;
case 26:return 'R_Println';
break;
case 27:return 'R_Print';
break;
case 28:return 53;
break;
case 29:return 54;
break;
case 30:return 'S_DosPuntos';
break;
case 31:return 11;
break;
case 32:return 15;
break;
case 33:return 17;
break;
case 34:return 20;
break;
case 35:return 22;
break;
case 36:return 32;
break;
case 37:return 12;
break;
case 38:return 'S_ComillaSimple';
break;
case 39:return 30;
break;
case 40:return 'S_ComillaDoble';
break;
case 41:return 42;
break;
case 42:return 43;
break;
case 43:return 44;
break;
case 44:return 45;
break;
case 45:return 46;
break;
case 46:return 47;
break;
case 47:return 'OP_Decremento';
break;
case 48:return 'OP_Incremento';
break;
case 49:return 'REL_MenorIgualQue';
break;
case 50:return 'REL_MayorIgualQue';
break;
case 51:return 'REL_IgualIgual';
break;
case 52:return 'REL_Distinto';
break;
case 53:return 'REL_MenorQue';
break;
case 54:return 'REL_MayorQue';
break;
case 55:return 'LOG_Not';
break;
case 56:return 'LOG_Concatenar';
break;
case 57:return 'LOG_OR';
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 49; 
break;
case 59:return 50;
break;
case 60:return 51;
break;
case 61:return 13;
break;
case 62:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 55;
break;
case 63:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 52;
break;
case 64:return 5;
break;
case 65:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:--)/,/^(?:\+\+)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[\'][\\][\"\'nrt\\][\'])/,/^(?:[\'][^\'\\\"][\'])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AnalizadorLSJava;
exports.Parser = AnalizadorLSJava.Parser;
exports.parse = function () { return AnalizadorLSJava.parse.apply(AnalizadorLSJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}